openapi: 3.0.0
info:
  version: 0.0.1
  title: Donshi Backend Development API
  description: ''
servers:
<<<<<<< HEAD
  - url: http://localhost:3000
=======
  - url: http://localhost:8080/api
>>>>>>> b7f355f (add docker env)
  - url: https://livinglab.ccu.edu.tw/testapi
tags:
  - name: ''
  - description: ''
security:
   - apiKeyAuth: []
   - bearerAuth: [] 
paths:
  /:
    get:
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
  /uploads/{upload}:
    get:
      description: ''
      parameters:
        - name: upload
          in: path
          required: true
          schema:
            type: string
      responses:
        '500':
          description: Internal Server Error
  /apk/{apkFile}:
    get:
      description: ''
      parameters:
        - name: apkFile
          in: path
          required: true
          schema:
            type: string
      responses:
        '500':
          description: Internal Server Error
  /public/post/getAllWithType:
     get:
      tags:
        - Post
      description: ''
      deprecated: true
  /public/post/getById:
    get:
      tags:
        - Post
      description: ''
      parameters: 
        - name: postId
          in : query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 回傳所有符合的Post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /public/post/query:
    get:
      tags:
        - Post
      description: ''
      parameters: 
        - name: search
          in : query
          required: false
          schema:
            type: string
          description: Text in title or body.
        - name: typeId
          in : query
          required: false
          schema:
            type: integer
        - name: limit
          in : query
          required: false
          schema:
            type: integer
          description: defaults to 50
        - name: offset
          in : query
          required: false
          schema:
            type: integer
        - name: isNeed
          in : query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: 回傳所有符合的Post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /private/post/getUserPosts:
    get:
      tags:
        - Post
      description: ''
      parameters: 
        - name: userId
          in : query
          required: false
          schema:
            type: string
          description: if no userId input,will get current user's posts
        - name: isNeed
          in : query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: 回傳所有符合的Post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /public/post/getLimitWithType:
    get:
      tags:
        - Post
      description: ''
      deprecated: true
  /public/user/login:
    post:
      description: ''
      parameters: []
      responses:
        '403':
          description: Forbidden
      deprecated: true
  /public/user/googleLogin:
    post:
      tags:
        - Auth
      summary: Google OAuth2.0登入
      description: ''
      parameters: []
      responses:
        '200':
          description: 登入成功後得到的token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: <Token for every request use>
                xml:
                  name: main
            application/xml:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: <Token for every request use>
                xml:
                  name: main
        '403':
          description: Forbidden
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                googleIdToken:
                  type: string
              required:
                - googleIdToken
  /public/user/register:
    post:
      tags:
        - Auth
      summary: Google OAuth2.0 Register
      description: ''
      parameters: []
      responses:
        '200':
          description: 登入成功後得到的token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: <Token for every request use>
                xml:
                  name: main
            application/xml:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: <Token for every request use>
                xml:
                  name: main
        '400':
          description: 輸入資料有誤
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  msg:
                    type: string
                    example: <Error message>
                xml:
                  name: main
            application/xml:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  msg:
                    type: string
                    example: <Error message>
                xml:
                  name: main
        '403':
          description: Forbidden
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                googleIdToken:
                  type: string
                gender:
                  type: string
                birthday:
                  type: string
                  format: date
                introduction:
                  type: string
                phone:
                  type: string
                pictureUrl:
                  type: string
              required:
                - googleIdToken
                - gender
                - birthday
                - phone
  /public/type/getAll:
    get:
      tags:
        - Type
      description: ''
      parameters: []
      responses:
        '200':
          description: All Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
            application/xml:
              schema:
                $ref: '#/components/schemas/Type'
        '403':
          description: Forbidden
  /public/topic/getAll:
    get:
      tags:
        - Topic
      deprecated: true
  /public/topic/getWithType:
    get:
      tags:
        - Topic
      summary: 取得Type中擁有的Topic
      description: ''
      parameters: 
        - in: query
          name: typeId
          schema:
            type: integer
          description: Type ID
      responses:
        '200':
          description: 回傳與該Type有關之Topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
            application/xml:
              schema:
                $ref: '#/components/schemas/Topic'
        '404':
          description: Resource Not Found
        '403':
          description: Forbidden
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                typeId:
                  type: integer
              required:
                - typeId
  /private/checkTokExp:
    post:
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /private/checkAPKversion:
    post:
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /private/post/addNewPost:
    post:
      tags:
        - Post
      description: ''
      parameters: []
      responses:
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /private/post/delete:
    delete:
      tags:
        - Post
      description: ''
      parameters: 
        - in: query
          name: postId
          schema:
            type: integer
          description: Post ID
      responses:
        '200':
          description: Delete success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Post not found
    
  /private/post/update:
    post:
      tags:
        - Post
      description: ''
      parameters: []
      responses:
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Post not found
  /private/post/addComment:
    post:
      tags:
        - Comment
      description: ''
      parameters: []
      responses:
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /private/comment/addAndGet:
    post:
      tags:
        - Comment
      deprecated: true
  /private/comment/delete:
    delete:
      tags:
        - Comment
      description: ''
      parameters: 
        - name: id
          in: query
          schema:
            type: integer
          description: Comment ID
      responses:
        '200':
          description: Delete success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Comment not found
  /private/comment/update:
    post:
      tags:
        - Comment
      description: ''
      parameters: []
      responses:
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Comment not found
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                text:
                  type: string
              required:
                - id
                - text
  /private/comment/addReply:
    post:
      tags:
        - Reply
      description: ''
      parameters: []
      responses:
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /private/reply/delete:
    delete:
      tags:
        - Reply
      description: ''
      parameters: 
        - name: id
          in: query
          schema:
            type: integer
          description: Reply ID
      responses:
        '200':
          description: Delete success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Reply not found
  /private/reply/update:
    post:
      tags:
        - Reply
      description: ''
      parameters: []
      responses:
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Reply not found
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                text:
                  type: string
              required:
                - id
                - text
  /private/user/getPosts:
    get:
      tags:
        - Users
      summary: 取得登入的User擁有的發文
      deprecated: true
  /private/user/getUser:
    get:
      tags:
        - Users
      summary: 取得登入的User資料
      description: ''
      parameters: []
      responses:
        '200':
          description: Current User Data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /private/user/update:
    post:
      tags:
        - Users
      description: ''
      parameters: []
      responses:
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /private/user/getOtherUser:
    get:
      tags:
        - Users
      summary: 取得某User資料
      description: ''
      parameters: 
        - in: query
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: Found Other User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /private/user/getUserPosts:
    get:
      tags:
        - Users
      description: ''
      deprecated: true
  /private/user/getAllUsername:
    get:
      tags:
        - Users
      summary: 取得所有User
      description: ''
      parameters: []
      responses:
        '200':
          description: All Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /private/user/searchUser:
    get:
      tags:
        - Users
      description: ''
      parameters: 
        - name: search
          in: query
          required: true
          schema:
            type: string
          description: Search username
      responses:
        '200':
          description: Users matched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /private/topic/addTopic:
    post:
      tags:
        - Topic
      description: ''
      parameters: []
      responses:
        '200':
          description: New topic added (regardless new or old)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
            application/xml:
              schema:
                $ref: '#/components/schemas/Topic'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                typeId:
                  type: integer
                topicName:
                  type: string
              required:
                - typeId
                - topicName
  /private/topic/deleteTopic:
    delete:
      tags:
        - Topic
      description: ''
      parameters: 
        - in: query
          name: topicId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Delete successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /private/uploadImg:
    post:
      description: ''
      parameters: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '413':
          description: Payload Too Large
        '500':
          description: Internal Server Error
components:
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: api-key
      description: API_KEY
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Type:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: typeId
        typeName:
          type: string
          description: TypeName
    Topic:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: topicId
        topicName:
          type: string
          description: TopicName
        isCreatedByUser:
          type: boolean
          description: true when it is CreatedByUser
    UserLessInfo:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: userId
        username:
          type: string
          description: User name in view
        pictureUrl:
          type: string
          description: 使用者頭像網址
        role:
          type: integer
          description: 使用者角色(0=一般使用者, 1=管理員)
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: userId
        account:
          type: string
          description: email
        username:
          type: string
          description: User name in view
        gender:
          type: string
          description: 男/女
        birthday:
          type: string
          format: date
          description: 出生年月日
        introduction:
          type: string
          description: 使用者自我介紹
        phone:
          type: string
          description: Telephone number
        pictureUrl:
          type: string
          description: 使用者頭像網址
        hasUserTicket:
          type: boolean
          description: 擁有好時卷
    Post:
      type: object
      properties:
        id:
          type: string
          description: postId
        typeId:
          type: integer
          description: typeId
        topicId:
          type: integer
          description: topicId
        title:
          type: string
          description: 貼文標題
        startDate:
          type: string
          format: date
          description: 公告開始日期
        endDate:
          type: string
          format: date
          description: 公告結束日期
        position:
          type: string
          description: 地點
        text:
          type: string
          description: 內文
        latitude:
          type: string
          description: Latitude
        longitude:
          type: string
          description: Longitude
        userId:
          type: string
          description: 貼文擁有者
        isNeed:
          type: boolean
          description: true=需求/false=資訊
        topic:
          $ref: '#/components/schemas/Topic'
        type:
          $ref: '#/components/schemas/Type'
        user:
          $ref: '#/components/schemas/UserLessInfo'
        files:
          type: array
          $ref: '#/components/schemas/files'
        comments:
          type: array
          $ref: '#/components/schemas/Comment'
    Comment:
      type: object
      properties:
        id:
          type: integer
          description: commentId
        user:
          type: object
          $ref: '#/components/schemas/UserLessInfo'
        replies:
          type: array
          $ref: '#/components/schemas/Reply'
          description: 內文
        updatedAt:
          type: string
          format: date
          description: 最後更新時間
    Reply:
      type: object
      properties:
        id:
          type: integer
          description: replyId
        text:
          type: string
        updatedAt:
          type: string
          format: date
          description: 最後更新時間
        user:
          type: object
          $ref: '#/components/schemas/UserLessInfo'
    files:
      type: object
      properties:
        id:
          type: integer
          description: fileId
        url:
          type: string
          description: 檔案網址
        filename:
          type: string
          description: 檔案名稱
    Error:
      type: object
      properties:
        code:
          type: integer
  responses:
    UnauthorizedError:
      description: The user is not authorized to perform this operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    default:
      $ref: '#/components/responses/UnauthorizedError'

